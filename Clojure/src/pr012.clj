;The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

;Let us list the factors of the first seven triangle numbers:

; 1: 1
; 3: 1,3
; 6: 1,2,3,6
;10: 1,2,5,10
;15: 1,3,5,15
;21: 1,3,7,21
;28: 1,2,4,7,14,28
;We can see that 28 is the first triangle number to have over five divisors.

;What is the value of the first triangle number to have over five hundred divisors?
(def triangle-nums (map first (iterate (fn [[n m]] [(+ n m) (+ m 1)]) [1 2])))


;(println (take 5 get-triangle-num-lazy ))

(defn get-triangle-num [num]
	(apply + (range 1 num)))

(defn get-num-divs [num]
	(loop [idx 2 count 2]
		(if (> idx (/ num 2)) count
			(if (= (mod num idx) 0)
				(recur (inc idx) (inc count))
				(recur (inc idx) count)
				)
			)
		)
	)

(defn find-tri-factor-count [num-factor-limit]
	(loop [idx 1]
		(let [tri-num (get-triangle-num idx)]
			(if (> (get-num-divs tri-num) num-factor-limit)
				tri-num
				(recur (inc idx))
				)
			)
		)
	)

;(println (time(find-tri-factor-count 500)))